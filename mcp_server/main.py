# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:07:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    GovidCertificatePostRequest,
    GovidCertificatePostResponse,
    GovidCertificatePostResponse1,
    GovidCertificatePostResponse2,
    GovidCertificatePostResponse3,
    GovidCertificatePostResponse4,
    GovidCertificatePostResponse5,
    GovidCertificatePostResponse6,
    MbcerCertificatePostRequest,
    MbcerCertificatePostResponse,
    MbcerCertificatePostResponse1,
    MbcerCertificatePostResponse2,
    MbcerCertificatePostResponse3,
    MbcerCertificatePostResponse4,
    MbcerCertificatePostResponse5,
    MbcerCertificatePostResponse6,
)

app = MCPProxy(
    description='Institute of Company Secretaries of India is available on DigiLocker. ID Card is available for candidates to pull into their DigiLocker account. ICSI members can also pull their ACS certificates  into their DigiLocker account.',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Institute of Company Secretaries of India',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/icsi/v3'}],
)


@app.post(
    '/govid/certificate',
    description=""" API to verify ID Card. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def govid(body: GovidCertificatePostRequest = None):
    """
    ID Card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mbcer/certificate',
    description=""" API to verify Membership Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def mbcer(body: MbcerCertificatePostRequest = None):
    """
    Membership Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
